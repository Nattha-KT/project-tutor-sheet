generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sheet {
  id              String   @id @default(cuid())
  course_code     String
  name            String
  semester        String
  type            String
  year            String
  price           Int
  num_page        Int
  status_approve  Boolean  @default(false)
  class_details   String
  content_details String
  cover_page      String?
  suggestion      String?
  samples_page    String[]
  file_path       String?
  date            DateTime @default(now())
  sid             String
  list            List[]
  owner           Owner[]
  seller          Seller   @relation(fields: [sid], references: [id])
}

model Owner {
  userId  String
  sheetId String
  sheet   Sheet  @relation(fields: [sheetId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@id([userId, sheetId])
}

model User {
  id             String         @id @default(cuid())
  name           String?
  image          String?
  email          String         @unique
  emailVerified  DateTime?
  password       String?
  hashedPassword String?
  role           Role           @default(USER)
  sid            String?
  accounts       Account[]
  complaint      Complaint[]
  favorite       FavoriteList[]
  owner          Owner[]
  sessions       Session[]
  seller         Seller?        @relation(fields: [sid], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Seller {
  id        String  @id @default(cuid())
  pen_name  String
  full_name String
  phone     String
  bank_name String
  bank_id   String
  address   String
  image     String?
  sheet     Sheet[]
  user      User[]
}

model Complaint {
  id       String @id @default(cuid())
  userId   String
  head     String
  category String
  content  String
  role     String
  level    Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FavoriteList {
  id     String @id @default(cuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
  list   List[]
}

model List {
  id         String       @id @default(cuid())
  sheetId    String
  favoriteId String
  favorite   FavoriteList @relation(fields: [favoriteId], references: [id])
  sheet      Sheet        @relation(fields: [sheetId], references: [id])
}

model Post {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime @default(now())
}

model Faq {
  id     String   @id @default(cuid())
  title  String
  answer String
  date   DateTime @default(now())
}

model Bank {
  id   Int    @id @default(autoincrement())
  name String
}

enum Role {
  ADMIN
  USER
  SELLER
}
