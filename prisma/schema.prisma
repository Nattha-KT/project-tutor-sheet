generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sheet {
  id              String      @id @default(cuid())
  course_code     String
  name            String
  semester        String
  type            String
  year            String
  price           Int
  num_page        Int
  status_approve  Boolean     @default(false)
  class_details   String
  content_details String
  cover_page      String?
  suggestion      String?
  samples_page    String[]
  file_path       String?
  date            DateTime    @default(now())
  sid             String
  favorite        Favorite[]
  cart            Cart[]
  rating          Rating[]
  Ownership       Ownership[]
  comment         Comment[]
  seller          Seller      @relation(fields: [sid], references: [id], onDelete: Cascade)
}

model Order {
  id         String      @id
  createdAt  DateTime    @default(now())
  sheetId    String[]
  session_id String      @unique
  status     String
  userId     String
  Ownership  Ownership[]
  rating     Rating[]
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Ownership {
  id      String @id @default(cuid())
  userId  String
  sheetId String
  orderId String
  sheet   Sheet  @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Rating {
  id       String @id @default(cuid())
  category String
  point    Float
  userId   String
  orderId  String
  sheetId  String? @db.VarChar(50) 
  sid      String
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  sheet    Sheet?  @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  seller   Seller @relation(fields: [sid], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String      @id @default(cuid())
  name           String?
  image          String?
  email          String      @unique
  emailVerified  DateTime?
  password       String?
  hashedPassword String?
  role           Role        @default(USER)
  sid            String?
  accounts       Account[]
  complaint      Complaint[]
  favorite       Favorite[]
  cart           Cart[]
  comment        Comment[]
  like           Like[]
  Ownership      Ownership[]
  order          Order[]
  sessions       Session[]
  rating         Rating[]
  seller         Seller?     @relation(fields: [sid], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Seller {
  id        String   @id @default(cuid())
  pen_name  String
  full_name String
  phone     String
  bank_name String
  bank_id   String
  about_me  String?
  address   String
  image     String?
  sheet     Sheet[]
  user      User[]
  rating    Rating[]
}

model Comment {
  id        String    @id @default(cuid())
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  sheet     Sheet     @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  sheetId   String
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("ParentChild")
  parentId  String?
  likes     Like[]
}

model Like {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  commentId String

  @@id([userId, commentId])
}

model Complaint {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  head      String
  category  String
  content   String
  role      String
  level     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Favorite {
  userId  String
  sheetId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  sheet   Sheet  @relation(fields: [sheetId], references: [id], onDelete: Cascade)

  @@id([userId, sheetId])
}

model Cart {
  userId  String
  sheetId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  sheet   Sheet  @relation(fields: [sheetId], references: [id], onDelete: Cascade)

  @@id([userId, sheetId])
}

model Faq {
  id     String   @id @default(cuid())
  title  String
  answer String
  date   DateTime @default(now())
}

model Bank {
  id   Int    @id @default(autoincrement())
  name String
}

enum Role {
  ADMIN
  USER
  SELLER
}
