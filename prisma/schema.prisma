// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Sheet{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  course_code String
  name String
  semester String
  type String
  year String
  price Int
  num_page Int
  status_approve Boolean  @default(false)
  class_details String
  content_details String
  cover_page String?
  samples_page String[]
  file_path String?
  date DateTime @default(now())
  sid String @db.ObjectId
  seller   Seller   @relation(fields: [sid], references: [id])
  owner Owner[]
  list List[]
}

model Owner{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  sheetId String @db.ObjectId
  sheet   Sheet   @relation(fields: [sheetId], references: [id])
}

model User{
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  image         String?
  email String     @unique
  emailVerified DateTime?
  password String?
  hashedPassword String?

  role Role @default(USER)
  
  owner Owner[]
  favorite FevoriteList[]
  accounts Account[]
  sessions      Session[]

  sid String? @db.ObjectId 
  seller   Seller?   @relation(fields: [sid], references: [id])
}

enum Role {
  ADMIN
  USER
  SELLER
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Seller{
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  pen_name String
  full_name String
  phone String
  bank_name  String
  bank_id String
  address   String
  sheet Sheet[]
  user User[]
}

model FevoriteList{
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  list List[]
}

model List{
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  sheetId String @db.ObjectId
  sheet   Sheet   @relation(fields: [sheetId], references: [id])
  favoriteId String @db.ObjectId
  favorite   FevoriteList   @relation(fields: [favoriteId], references: [id])
}

// model filePdf{
//   id    String @id @default(auto()) @map("_id") @db.ObjectId
//   url   String
// }

model Post{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  date DateTime @default(now())
}

model Faq{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  answer String
  date DateTime @default(now())
}

model Bank{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
}

